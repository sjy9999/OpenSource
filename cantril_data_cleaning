#!/usr/bin/env bash

# here I check the Validate the number of arguments        验证参数数量是否正确
if [ $# -ne 3 ]; then
    echo "Usage: $0 gdp-vs-happiness.tsv life_expectancy.tsv homicide-rate-unodc.tsv"
    exit 1
fi

# here I  give the variables based on fileName   in this way   I can change the order of input  I use *       根据文件名赋予变量
for arg in "$@"
do
    if [[ "$arg" == *"homicide"* ]]; then
        homicide_file="$arg"
    elif [[ "$arg" == *"life-expectancy"* ]]; then
        life_expectancy_file="$arg"
    elif [[ "$arg" == *"gdp-vs-happiness"* ]]; then
        happiness_file="$arg"
    fi
done

# Check if the files are tab-separated or CSV files
# in this part I check it is tsv csv or other type file      检查文件是否为制表符分隔的格式，并检查是否错误地传入了CSV文件
for file in "$happiness_file" "$life_expectancy_file" "$homicide_file"; do
    if ! head -n 1 "$file" | grep -qP '\t'; then
        if head -n 1 "$file" | grep -qP ','; then
            echo "Error: $file is a CSV file, not a TSV file." >&2
        else
            echo "Error: $file is not a tab-separated values file." >&2
        fi
        exit 2
    fi
done

# here I set input and output and get a new file  the aim is to clean potential format issues in input files    清理输入文件中的潜在格式问题
awk -F'\t' -v OFS='\t' '{ print; }' "$happiness_file" > cleaned_gdp_vs_happiness.tsv


# Process 2 tsv     they are life_expectancy.tsv and homicide-rate-unodc.tsv files      处理 life_expectancy.tsv 和 homicide-rate-unodc.tsv 文件
#  set the year 2011 and 2021  this is requirement       do not merge into one cells   $4 is life the num is int or float
awk -F'\t' -v OFS='\t' 'NR > 1 && $3 >= 2011 && $3 <= 2021 {
    gsub(/\r/, ""); 
    if ($4 !~ /^[0-9]+(\.[0-9]+)?$/) $4 = "";  # not  integer or decimal, set empty  如果不是整数或者小数，则设置为空
    print $2, $3, $4;
}' "$life_expectancy_file" > life_expectancy.map
# $4 is life the num is float   
awk -F'\t' -v OFS='\t' 'NR > 1 && $3 >= 2011 && $3 <= 2021 {
    gsub(/\r/, "");    
    # delete enter
    if ($4 !~ /^[0-9]+\.?[0-9]*$/) $4 = "";  #  not  decimal, set empty   如果不是小数，则设置为空
    print $2, $3, $4;
}' "$homicide_file" > homicide_rate.map


# this is to print header to standard output   first line       打印表头到标准输出
echo -e "Entity\tCode\tYear\tGDP per capita\tPopulation\tHomicide Rate\tLife Expectancy\tCantril Ladder score"

# remerge the data and output directly to standard output     >0  means it is correct      重新合并数据并直接输出到标准输出
awk -F'\t' -v OFS='\t' '
    BEGIN {
        # get the data from map and then >0   combine the key
        while ((getline < "life_expectancy.map") > 0) {
            life_exp[$1 FS $2] = $3;
        }
        while ((getline < "homicide_rate.map") > 0) {
            homicide[$1 FS $2] = $3;
        }
    }
    FNR > 1 && $2 != "" && $3 >= 2011 && $3 <= 2021 {
        # now
        key = $2 FS $3;
        gdp = $5; pop = $6; cantril = $4;
        homicide_rate = (key in homicide ? homicide[key] : "");
        life_expectancy = (key in life_exp ? life_exp[key] : "");
        
        output = $1 OFS $2 OFS $3 OFS gdp OFS pop OFS homicide_rate OFS life_expectancy OFS cantril;

        # Check if key columns are empty    only get the full data       检查关键列是否为空
        if (gdp == "" || pop == "" || (homicide_rate == "" && key in homicide) || (life_expectancy == "" && key in life_exp)) {
            print "correct should have 8 cells,Incomplete data is:", output > "/dev/stderr";
        } else {
            print output;  # full 8 cells data  只有当所有关键字段都不为空时才输出
        }
    }
' cleaned_gdp_vs_happiness.tsv | sort -k1,1 -k3,3n
# this is sort by country and year

# this is end to clean temp files        清理临时文件
rm life_expectancy.map homicide_rate.map cleaned_gdp_vs_happiness.tsv
